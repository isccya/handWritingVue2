{"version":3,"file":"vue.js","sources":["../src/utils.js","../src/GlobalAPI.js","../src/compiler/parse.js","../src/compiler/index.js","../src/observe/dep.js","../src/observe/array.js","../src/observe/index.js","../src/observe/watcher.js","../src/state.js","../src/vdom/index.js","../src/vdom/patch.js","../src/lifecycle.js","../src/init.js","../src/index.js"],"sourcesContent":[" // 静态方法 \r\n const strats = {};\r\n const LIFECYCLE = [\r\n     'beforeCreate',\r\n     'created'\r\n ]\r\n LIFECYCLE.forEach(hook => {\r\n     strats[hook] = function (p, c) {\r\n         if (c) {\r\n             if (p) { //如果儿子有,父亲有,拼在一起\r\n                 return p.concat(c)\r\n             } else {\r\n                 return [c]\r\n             }\r\n         } else {\r\n             return p //如果没有儿子,则用父亲的即可\r\n         }\r\n     }\r\n })\r\n\r\nexport function mergeOptions(parent, child) {\r\n    const options = {}\r\n    for (let key in parent) {\r\n        mergeField(key)\r\n    }\r\n    for (let key in child) {\r\n        if (!parent.hasOwnProperty(key)) {\r\n            mergeField(key)\r\n        }\r\n    }\r\n    function mergeField(key) {\r\n        // 用策略模式减少if else\r\n        if (strats[key]) {\r\n            options[key] = strats[key](parent[key], child[key])\r\n        } else {\r\n            options[key] = child[key] || parent[key]\r\n        }\r\n    }\r\n    return options\r\n}\r\n","import { mergeOptions } from \"./utils\";\r\n\r\nexport function initGlobalAPI(Vue) {\r\n   \r\n\r\n    Vue.options = {} //上面是合并后的配置\r\n\r\n    Vue.mixin = function (mixin) {\r\n        // 将用户的选项和全局options进行合并\r\n        this.options = mergeOptions(this.options, mixin)\r\n        return this\r\n    }\r\n}","/**\r\n * \r\n * 这个文件夹***生成AST语法树***\r\n * \r\n * \r\n * 获取模板字符串后,从头到尾先解析开始标签,获得其标签名,属性,和结束标签和标签文本内容.模板字符串不断裁剪到为空.\r\n * 根据开始标签,文本,结束标签创建AST节点,注意根节点的判断,以及父子节点关系,通过一个栈数据结构判断父子节点\r\n * 开始标签会进栈,结束标签出栈,文本会直接作为当前父节点的属性,栈结尾的元素即为当前的要进栈元素的***父节点***\r\n * 最终形成AST语法树.每一层是一个节点,有父节点,子节点,和自身属性.\r\n * \r\n * */ \r\n\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 他匹配到的分组是一个 标签名  <xxx 匹配到的是开始 标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);  // 匹配的是</xxxx>  最终匹配到的分组就是结束标签的名字\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;  // 匹配属性\r\n// 第一个分组就是属性的key value 就是 分组3/分组4/分组五\r\nconst startTagClose = /^\\s*(\\/?)>/;  // <div> <br/>\r\n\r\n// vue3 采用的不是使用正则\r\n// 对模板进行编译处理  \r\nexport function parseHTML(html) {\r\n\r\n    const ELEMENT_TYPE = 1;\r\n    const TEXT_TYPE = 3;\r\n    const stack = []; // 用于存放元素的\r\n    let currentParent; // 指向的是栈中的最后一个\r\n    let root;\r\n\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            children:[],\r\n            attrs,\r\n            parent: null\r\n        }\r\n    }\r\n\r\n    function start(tag, attrs) {\r\n        let node = createASTElement(tag, attrs) //创建一个ast节点\r\n        if (!root) { //没有根节点,当前元素就是根节点\r\n            root = node\r\n        }\r\n        if (currentParent) {\r\n            node.parent = currentParent //子知父\r\n            currentParent.children.push(node) //父知子\r\n        }\r\n        stack.push(node)\r\n        currentParent = node //父节点为栈中最后一个元素\r\n    }\r\n\r\n    function chars(text) { //文本放到当前指向的节点\r\n        text = text.replace(/\\s/g,''); \r\n        text && currentParent.children.push({\r\n            type: TEXT_TYPE,\r\n            text,\r\n            parent:currentParent\r\n        })\r\n\r\n    }\r\n\r\n    function end(tag) {\r\n        stack.pop() //弹出最后一个\r\n        currentParent = stack[stack.length - 1]\r\n\r\n    }\r\n\r\n    // 模板解析完多少,就前进多少\r\n    function advance(n) {\r\n        html = html.substring(n)\r\n    }\r\n\r\n    // 解析开始标签及其里面的属性\r\n    function parseStartTag() {\r\n        const start = html.match(startTagOpen)\r\n        // 1.匹配到开始标签\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1], //标签名\r\n                attrs: []\r\n            }\r\n            advance(start[0].length);\r\n            // 2.如果不是开始标签的结束,就一直匹配属性,把属性值放入match.attrs中\r\n            let attr, end;\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                advance(attr[0].length)\r\n                match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] } || true)\r\n            }\r\n            // 3.匹配到结束符号\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n            return match\r\n        }\r\n        return false //不是开始标签\r\n    }\r\n\r\n\r\n    while (html) {\r\n        // 如果textEnd 为0 说明是一个开始标签或者结束标签\r\n        // 如果textEnd > 0说明就是文本的结束位置\r\n        let textEnd = html.indexOf('<');  // 如果indexOf中的索引是0 则说明是个标签\r\n        if (textEnd === 0) {\r\n            const startTagMatch = parseStartTag() //开始标签的匹配\r\n            if (startTagMatch) {\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            let endTagMatch = html.match(endTag)\r\n            if (endTagMatch) {\r\n                end(endTagMatch[1])\r\n                advance(endTagMatch[0].length)\r\n                continue\r\n            }\r\n\r\n        }\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd) //文本内容\r\n            if (text) {\r\n                chars(text)\r\n                advance(text.length) //解析到的文本\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n}","import { parseHTML } from \"./parse\";\r\n/**\r\n * \r\n * \r\n * \r\n * \r\n * compileToFunction传入一个模板,将模板变为AST语法树,AST语法树代码生成渲染函数\r\n * \r\n * \r\n * \r\n * \r\n * */ \r\nfunction genProps(attrs) {\r\n    let str = ''// {name,value}\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i];\r\n        if (attr.name === 'style') {\r\n            // color:red;background:red => {color:'red'}\r\n            let obj = {};\r\n            attr.value.split(';').forEach(item => { // qs 库\r\n                let [key, value] = item.split(':');\r\n                obj[key] = value;\r\n            });\r\n            attr.value = obj\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},` // a:b,c:d,\r\n    }\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\n\r\n\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; // {{ asdsadsa }}  匹配到的内容就是我们表达式的变量\r\nfunction gen(node) {\r\n    if (node.type === 1) {\r\n        return codegen(node);\r\n    } else {\r\n        // 文本\r\n        let text = node.text\r\n        if (!defaultTagRE.test(text)) {\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else {\r\n            //_v( _s(name)+'hello' + _s(name))\r\n            let tokens = [];\r\n            let match;\r\n            defaultTagRE.lastIndex = 0;\r\n            let lastIndex = 0;\r\n            // split\r\n            while (match = defaultTagRE.exec(text)) {\r\n                let index = match.index; // 匹配的位置  {{name}} hello  {{name}} hello \r\n                if (index > lastIndex) {\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                tokens.push(`_s(${match[1].trim()})`)\r\n                lastIndex = index + match[0].length\r\n            }\r\n            if (lastIndex < text.length) {\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            return `_v(${tokens.join('+')})`\r\n        }\r\n    }\r\n}\r\nfunction genChildren(children) {\r\n    return children.map(child => gen(child)).join(',')\r\n}\r\nfunction codegen(ast) {\r\n    let children = genChildren(ast.children);\r\n    let code = (`_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'\r\n        }${ast.children.length ? `,${children}` : ''\r\n        })`)\r\n\r\n    return code;\r\n}\r\n\r\n\r\nexport function compileToFunction(template) {\r\n\r\n    // 1.将template转换为AST语法树\r\n    let ast = parseHTML(template)\r\n    \r\n    // 2.生成render方法(render方法执行后返回的是虚拟DOM)\r\n    let code = codegen(ast);\r\n\r\n    // 模板引擎的实现原理 就是 with  + new Function \r\n\r\n\r\n    code = `with(this){return ${code}}`\r\n    const render = new Function(code)\r\n    return render\r\n}","let id = 0\r\n/**\r\n * dep每个属性都有,目的是收集watcher,是在闭包上的私有属性.无法手动访问dep对象\r\n * 每个对象也有,在对象__ob__上,这个属性就是observe实例.dep是在observe实例上\r\n * \r\n * */\r\nclass Dep {\r\n    constructor() {\r\n        this.id = id++ //属性的dep收集watcher\r\n        this.subs = [] //存放属性对应的watcher有哪些\r\n    }\r\n    depend() {\r\n        // 不希望重复记录watcher\r\n        Dep.target.addDep(this) //让watcher记住dep\r\n\r\n        // dep和watcher是一个多对多关系\r\n    }\r\n    addSub(watcher) {\r\n        this.subs.push(watcher)\r\n    }\r\n    notify() {\r\n        this.subs.forEach(watcher => watcher.update()) //告诉watcher要更新了\r\n    }\r\n}\r\n\r\nDep.target = null\r\nlet stack = []\r\nexport function pushTarget(watcher){ \r\n    stack.push(watcher)\r\n    Dep.target = watcher\r\n} \r\nexport function popTarget(watcher){\r\n    stack.pop()\r\n     Dep.target = stack[stack.length - 1]\r\n}\r\n\r\n\r\nexport default Dep;","// 我们希望重写数组上的方法\r\n\r\n\r\n\r\nlet oldArrayProto = Array.prototype //获取数组的原型\r\n\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nlet methods = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'reverse',\r\n    'sort',\r\n    'splice',\r\n]\r\n\r\nmethods.forEach((method) => {\r\n    newArrayProto[method] = function (...args) { //这里重写了数组的方法\r\n        // console.log(method);\r\n        const result = oldArrayProto[method].call(this, ...args) //内部调用原来的方法\r\n        let inserted ;\r\n        let ob = this.__ob__;\r\n        switch(method){\r\n            case 'push' :\r\n            case 'unshift' :\r\n                inserted = args\r\n                break;\r\n            case 'splice' :\r\n                inserted = args.slice(2)\r\n            default:\r\n                break;\r\n        }\r\n        if(inserted){\r\n            ob.observeArray(inserted);\r\n        }\r\n\r\n        ob.dep.notify(); //数组变化了,通知对应的watcher实现更新逻辑\r\n        return result\r\n    }\r\n})\r\n// console.log(newArrayProto);","import { newArrayProto } from \"./array\"\r\nimport Dep from \"./dep\"\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n\r\n        // 给每个对象添加收集功能\r\n        this.dep = new Dep()\r\n\r\n        // Object,defineProperty只能劫持已经存在的属性\r\n        Object.defineProperty(data, '__ob__', {//给数据添加了一个标识,如果数据上有_ob_说明这个数据被观测过了\r\n            value: this,\r\n            enumerable: false,//将下划线ob变成不可枚举(循环时候无法获取)\r\n        })\r\n        // data._ob_ = this; \r\n        if (Array.isArray(data)) { //如果代理的数据是数组,不能给数组每一个索引都作响应式,很少有arr[876]这样的需求,只对数组方法里面做响应式,还有数组里面的对象作响应式\r\n            data.__proto__ = newArrayProto //保留数组原有的特性,并且可以重写部分方法\r\n            this.observeArray(data) //如果数组中存放的是对象,可以监测到对象的变化\r\n        } else {\r\n            this.walk(data)\r\n        }\r\n    }\r\n    walk(data) { // 循环对象,对属性依次劫持\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n    }\r\n    observeArray(data) {\r\n        data.forEach(item => observe(item)) //把数组里的对象都变成响应式\r\n    }\r\n}\r\n\r\nfunction dependArray(value) {\r\n    for (let i = 0; i < value.length; i++) {\r\n        let current = value[i]\r\n        value.__ob__.dep.depend()\r\n        if (Array.isArray(current)) {\r\n            dependArray(current)\r\n        }\r\n    }\r\n}\r\n\r\n// !!!最终定义对象属性为响应式的方法!!!:get里依赖收集,借助了dep.set里依赖追踪\r\nexport function defineReactive(target, key, value) { //闭包 属性劫持\r\n    let childOb = observe(value) //递归,值是对象,也对对象内部的值做劫持 childOb用来收集依赖.(只有对象在observe中才会有返回值)\r\n    let dep = new Dep() //每一个属性都有dep,因为闭包.注意!!!是因为闭包有dep属性,而不是dep在属性上!!!\r\n    Object.defineProperty(target, key, {\r\n        // ***在数据的get方法进行依赖收集,访问了数据===>组件依赖这些数据***\r\n        get() {\r\n            if (Dep.target) {\r\n                dep.depend();//让这个属性记住当前的watcher\r\n                if (childOb) {\r\n                    childOb.dep.depend() //让数组和对象本身也实现依赖收集,数组会在变异方法被调用时候触发更新\r\n                    if (Array.isArray(value)) {\r\n                        dependArray(value)\r\n                    }\r\n                }\r\n            }\r\n            return value\r\n        },\r\n        // ***在数据的set方法进行依赖追踪,数据修改===>组件更新***\r\n        set(newValue) {\r\n            if (newValue === value) return\r\n            observe(newValue)\r\n            value = newValue\r\n            dep.notify() //通知更新\r\n        }\r\n    })\r\n}\r\n\r\nexport function observe(data) {\r\n    // 对这个对象劫持\r\n    if (typeof data !== 'object' || data === null) {\r\n        return; //只对对象劫持\r\n    }\r\n    if (data.__ob__ instanceof Observer) {//说明这个对象被代理过了\r\n        return data.__ob__\r\n    }\r\n    return new Observer(data);\r\n}","import  { popTarget, pushTarget } from \"./dep\";\r\n/**\r\n * 每个组件对应一个watcher,页面渲染的逻辑放到watcher里\r\n * 每个属性有一个dep (属性是被观察者), watcher是观察者(属性变化了会通知观察者来更新)\r\n * \r\n * 需要给每个数据增加一个dep,目的就是收集watcher\r\n    一个组件有多个数据(n个数据对应一个视图) n个dep对应一个watcher\r\n    一个数据对应多个组件\r\n    多对多 \r\n * */\r\n\r\n\r\n/**\r\n *  nextTick原理???\r\n * 1.数据更新后不会立刻更新页面,而是异步更新.\r\n * 2.数据更新会触发依赖这个数据的组件的watcher进行更新,会用一个队列缓冲一个事件循环中所有变更的数据,保存对应的watcher\r\n * 3.nexttick会把队列中watcher的更新操作放到异步任务中,采用了优雅降级的方式,\r\n * 原生的Promise.then、MutationObserver和setImmediate，上述三个都不支持最后使用setTimeout\r\n * 4.异步任务执行完后,清空队列.如果要在页面更新后访问DOM的话,也要用nextTick方法,相当于在watcher更新的异步任务后面排一个异步任务\r\n * \r\n * */\r\nlet id = 0\r\n\r\n\r\n\r\n\r\nclass Watcher { //不同组件有不同的watcher ,目前只有根组件有\r\n    constructor(vm, exprOrFn, options,cb) {\r\n        this.id = id++\r\n        this.renderWatcher = options //是一个渲染过程\r\n        if(typeof exprOrFn ==='string'){\r\n            this.getter = function(){\r\n                return vm[exprOrFn] // 侦听器watch中\r\n            }\r\n        }else{\r\n            this.getter = exprOrFn; //getter意味着调用这个函数可以发生取值操作\r\n        }\r\n        this.deps = []; // 后续 我们实现计算属性,和一些清理工作需要\r\n        this.depsId = new Set();\r\n        this.vm = vm\r\n        this.user = options.user;//标识是否是用户自己的watcher\r\n        this.cb = cb\r\n\r\n\r\n        this.lazy = options.lazy //***lazy这个变量***只控制计算属性默认不加载,计算属性才会传,没传就是组件\r\n        this.dirty = this.lazy //dirty判断是否重新求值(默认为true)\r\n        // 不要立刻执行,懒执行\r\n        this.value = this.lazy ? undefined : this.get()\r\n    }\r\n    addDep(dep) { // 一个组件对应多个属性 重复的属性也不用记录\r\n        let id = dep.id\r\n        if (!this.depsId.has(id)) {\r\n            this.deps.push(dep)\r\n            this.depsId.add(id)\r\n            dep.addSub(this) //watcher已经记住dep并且去重,此时让dep记住watcher\r\n        }\r\n    }\r\n    evaluate() {\r\n        this.value = this.get() //计算属性:调用用户传入的get,将值保存在value中,更新数据为不脏的(不用再运行求值的)\r\n        this.dirty = false\r\n    }\r\n    get() {\r\n        // 用不到的数据就不会收集\r\n        pushTarget(this)  //把当前渲染组件的watcher放在全局上,组件渲染会访问数据,数据里get方法会把把该组件添加到自己的dep中\r\n        let value = this.getter.call(this.vm) //会去vm上取值 vm._update(vm._render) 取name 和age. 计算属性里面依赖的数据被取值后,会把计算属性的watcher放入自己队列中\r\n        popTarget(this) // 渲染完之后清空\r\n        return value\r\n    }\r\n    update() {\r\n        if (this.lazy) {\r\n            // 如果是计算属性依赖的值变化(lazy标明这是计算属性watcher) 就标识计算属性是脏值\r\n            this.dirty = true\r\n        } else {\r\n            queueWatcher(this) //把当前watcher暂存,避免一个数据修改就更新整个页面\r\n        }\r\n    }\r\n    run() {\r\n        let oldValue = this.value\r\n        let newValue = this.get()\r\n        if(this.user){\r\n            this.cb.call(this.vm,newValue,oldValue)\r\n        }\r\n    }\r\n    depend() {\r\n        let i = this.deps.length;\r\n        while (i--) {\r\n        // 计算属性里面的属性的dep的depend\r\n            this.deps[i].depend() //让计算属性watcher也收集渲染watcher\r\n        }\r\n    }\r\n}\r\n\r\nlet queue = []\r\nlet has = {} //用对象去重watcher\r\nlet pending = false //防抖\r\n\r\nfunction flushSchedulerQueue() {\r\n    let flushQueue = queue.slice(0);\r\n    queue = [];\r\n    has = {};\r\n    pending = false;\r\n    flushQueue.forEach(q => q.run()); // 在刷新的过程中可能还有新的watcher，重新放到queue中\r\n}\r\n\r\nfunction queueWatcher(watcher) {\r\n    const id = watcher.id\r\n    if (!has[id]) {\r\n        queue.push(watcher)\r\n        has[id] = true\r\n        // 不管update执行多少次,但是最终只刷新一轮\r\n        if (!pending) {\r\n            nextTick(flushSchedulerQueue, 0) //同步任务里面最后一次赋值(同步前面可能赋值多次)后,异步任务再执行更新,所以是批处理\r\n            pending = true\r\n        }\r\n    }\r\n}\r\n// 又来一次这种方法,多个执行合成一个:一个变量,开个异步\r\n// 控制更新顺序\r\nlet callbacks = []\r\nlet waiting = false\r\nfunction flushCallbacks() {\r\n    let cbs = callbacks.slice(0)\r\n    waiting = false\r\n    callbacks = []\r\n    cbs.forEach(cb => cb())\r\n}\r\n// nextTick不是创建了异步任务,而是将异步任务维护到队列中\r\nexport function nextTick(cb) {\r\n    callbacks.push(cb)\r\n    if (!waiting) {\r\n        Promise.resolve().then(flushCallbacks)\r\n        waiting = true\r\n    }\r\n}\r\n\r\n\r\nexport default Watcher\r\n\r\n","import Dep from './observe/dep.js';\r\nimport { observe } from './observe/index.js'\r\nimport Watcher, { nextTick } from './observe/watcher.js';\r\nexport function initState(vm) {\r\n    const opts = vm.$options;\r\n    if (opts.data) {\r\n        initData(vm);\r\n    }\r\n    if (opts.computed) {\r\n        initComputed(vm)\r\n    }\r\n    if (opts.watch) {\r\n        initWatch(vm)\r\n    }\r\n}\r\n\r\nfunction initWatch(vm) {\r\n    let watch = vm.$options.watch;\r\n    for (let key in watch) {\r\n        const handler = watch[key]//字符串 数组 函数\r\n        if (Array.isArray(handler)) {\r\n            for (let i = 0; i < handler.length; i++) {\r\n                createWatcher(vm, key,handler[i])\r\n            }\r\n        }else{\r\n            createWatcher(vm, key,handler)\r\n        }\r\n    }\r\n}\r\n\r\nfunction createWatcher(vm, key,handler) {\r\n    //字符串 函数 (对象不考虑)\r\n    if(typeof handler === 'string'){\r\n        handler = vm[handler]\r\n    }\r\n    return vm.$watch(key,handler)\r\n}\r\n\r\n// 解决访问vm属性要vm_data.name这种写法,直接vm.name\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, { //vm.name\r\n        get() {\r\n            return vm[target][key] //vm._data.name\r\n        },\r\n        set(newValue) {\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data; //data可能是函数,也可能是对象\r\n    typeof data === 'function' ? data.call(vm) : data //data是用户返回的对象\r\n\r\n    vm._data = data //将返回的对象放到了_data上\r\n    // 对数据进行劫持 vue2里采用了一个api defineProperty\r\n    observe(data)\r\n\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n}\r\n\r\nfunction initComputed(vm) {\r\n    const computed = vm.$options.computed; //获取用户传入的computed\r\n    let watchers = vm._computedWachers = {} //将计算属性watcher保存到vm,因为后续还要访问属性的watcher\r\n    for (let key in computed) {\r\n        let userDef = computed[key]\r\n        // 需要监控 计算属性中get的变化\r\n        let fn = typeof userDef === 'function' ? userDef : userDef.get\r\n\r\n        // 每一个计算属性创建一个watcher,fn不立刻执行(lazy为true),并将所有属性watcher放到对象中,对象放到组件实例上\r\n        watchers[key] = new Watcher(vm, fn, { lazy: true }) //第一次设置为true,不会立即执行计算\r\n        defineComputed(vm, key, userDef) //是vm,模板解析计算属性时候还是去实例身上取值,所以要把值defineProperty到vm上\r\n    }\r\n}\r\n\r\nfunction defineComputed(target, key, userDef) {\r\n    const setter = userDef.set || (() => { })\r\n    Object.defineProperty(target, key, {\r\n        get: createComputedGetter(key),\r\n        set: setter\r\n    })\r\n}\r\n\r\n// 计算属性不会收集依赖,只会让自己的依赖属性去收集依赖\r\nfunction createComputedGetter(key) {//计算属性的getter方法\r\n    // 我们要检测是否要执行这个getter\r\n    return function () {\r\n        const watcher = this._computedWachers[key] //获取到对应属性的watcher\r\n        if (watcher.dirty) {//如果是脏,就去执行用户传入的参数\r\n            watcher.evaluate() //求值后dirty变为false,下次就用缓存的值\r\n        }\r\n        if (Dep.target) { //计算属性watcher出栈后 计算属性里面的属性还要上一层让渲染watcher更新\r\n            watcher.depend()\r\n        }\r\n        return watcher.value\r\n    }\r\n}\r\n\r\nexport function initStateMixin(Vue){\r\n    Vue.prototype.$nextTick = nextTick\r\n    Vue.prototype.$watch = function (exprOrFn, cb, options = {}) {\r\n        // firstname值变化,执行cb函数即可\r\n        new Watcher(this, exprOrFn,{user:true},cb)\r\n    }\r\n    \r\n}","/**\r\n * 这个文件是渲染函数render执行时候创建虚拟节点\r\n * */ \r\n\r\n// h()  _c()\r\nexport function createElementVNode(vm, tag, data, ...children) { //创建元素虚拟节点\r\n    if (data == null) {\r\n        data = {}\r\n    }\r\n    let key = data.key;\r\n    if (key) {\r\n        delete data.key\r\n    }\r\n    return vnode(vm, tag, key, data, children);\r\n}\r\n// _v();\r\nexport function createTextVNode(vm, text) { //创建文本虚拟节点\r\n    return vnode(vm, undefined, undefined, undefined, undefined, text);\r\n}\r\n// ast一样吗？ ast做的是语法层面的转化 他描述的是语法本身 (可以描述js css html)\r\n// 我们的虚拟dom 是描述的dom元素，可以增加一些自定义属性  (描述dom的)\r\nfunction vnode(vm, tag, key, data, children, text) {\r\n    return {\r\n        vm,\r\n        tag,\r\n        key,\r\n        data,\r\n        children,\r\n        text\r\n        // ....\r\n    }\r\n}\r\n\r\n// 判断两个虚拟节点是否相同\r\nexport function isSameVnode(vnode1,vnode2){\r\n    return vnode1.tag === vnode2.tag && vnode1.key === vnode2.key; // 没有key则key值是undefined,也认为是同节点\r\n}","import { isSameVnode } from \".\";\r\n\r\n// 创建真实DOM\r\nexport function createElm(vnode) {\r\n    let { tag, data, children, text } = vnode;\r\n    if (typeof tag == 'string') { //元素节点\r\n        vnode.el = document.createElement(tag)\r\n        patchProps(vnode.el, {}, data);\r\n        children.forEach(child => {\r\n            vnode.el.appendChild(createElm(child))\r\n        });\r\n    } else { //文本节点\r\n        vnode.el = document.createTextNode(text)\r\n    }\r\n    return vnode.el;\r\n}\r\n// 创建真实DOM中的元素节点时候添加元素属性\r\nexport function patchProps(el, oldProps, props) {\r\n    // 老的属性中有,新的没有,要删除老的\r\n    let oldStyles = oldProps.style || {}\r\n    let newStyles = props.style || {}\r\n    for (let key in oldStyles) { //老的样式有,新没有则删除\r\n        if (!newStyles[key]) {\r\n            el.style[key] = ''\r\n        }\r\n    }\r\n    for (let key in oldProps) { //老的属性有,新没有则删除\r\n        if (!props[key]) {\r\n            el.removeAttribute(key)\r\n        }\r\n    }\r\n\r\n    for (let key in props) { // 把新的属性全部放上去\r\n        if (key === 'style') {\r\n            for (let styleName in props.style) {\r\n                el.style[styleName] = props.style[styleName]\r\n            }\r\n        } else {\r\n            el.setAttribute(key, props[key])\r\n        }\r\n    }\r\n}\r\n\r\n// 写的是渲染过程,把真实DOM放到页面中了,并且返回新创建的真实DOM\r\nexport function patch(oldVnode, vnode) {\r\n    const isRealElement = oldVnode.nodeType\r\n    if (isRealElement) {\r\n        const elm = oldVnode; //获取真实DOM\r\n        const parentElm = elm.parentNode //拿到父元素\r\n        const newElm = createElm(vnode) //创建新DOM\r\n        parentElm.insertBefore(newElm, elm.nextSibling) //替换\r\n        parentElm.removeChild(elm) //删除老节点\r\n        return newElm\r\n    } else {\r\n        /**\r\n         * diff算法\r\n         * 1. 两个节点不是同一个节点 直接删除老的换上新的\r\n         * 2. 两个节点是同一个节点(判断节点的tag和key) 比较两个节点的属性是否有异同(复用老的节点,将新的属性更新)\r\n         * 3. 节点比较完比较两个人儿子\r\n         * */\r\n        return patchVnode(oldVnode, vnode)\r\n        // 不是相同节点\r\n\r\n    }\r\n}\r\n\r\n// diff算法比较两个节点\r\nfunction patchVnode(oldVnode, vnode) {\r\n    // 不是相同节点直接替换\r\n    if (!isSameVnode(oldVnode, vnode)) {\r\n        let el = createElm(vnode)\r\n        oldVnode.el.parentNode.replaceChild(el, oldVnode.el) // 用老节点的父亲替换\r\n        return el;\r\n    }\r\n    // 是相同节点\r\n    let el = vnode.el = oldVnode.el // 复用老节点的真实DOM元素\r\n    if (!oldVnode.tag) { //是文本\r\n        if (oldVnode.text !== vnode.text) {\r\n            el.textContent = vnode.text //用新文本覆盖老的\r\n        }\r\n    }\r\n    // 是标签 是标签我们需要对比标签的属性\r\n    patchProps(el, oldVnode.data, vnode.data)\r\n\r\n    // 比较儿子节点 比较时候 一方有儿子,一方没儿子\r\n\r\n\r\n\r\n    // 两方都有儿子\r\n\r\n    let oldChildren = oldVnode.children || {}\r\n    let newChildren = vnode.children || {}\r\n\r\n\r\n    if (oldChildren.length > 0 && newChildren.length > 0) {\r\n        // 完整的diff算法,比较两个的儿子\r\n        updateChildren(el, oldChildren, newChildren);\r\n    } else if (newChildren.length > 0) { //没有老的,有新的\r\n        mountChildren(el, newChildren)\r\n    } else if (newChildren.length > 0) { //没有新的,有老的\r\n        el.innerHTML = '' //可以循环删除\r\n    }\r\n\r\n\r\n\r\n    return el\r\n}\r\n\r\n\r\nfunction mountChildren(el, newChildren) {\r\n    for (let i = 0; i < newChildren.length; i++) {\r\n        el.appendChild(createElm(child))\r\n    }\r\n}\r\n\r\nfunction updateChildren(el, oldChildren, newChildren) {\r\n    // vue2采用双指针方式比较两个节点 \r\n    let oldStartIndex = 0\r\n    let newStartIndex = 0\r\n    let oldEndIndex = oldChildren.length - 1\r\n    let newEndIndex = newChildren.length - 1\r\n\r\n    let oldStartVnode = oldChildren[0]\r\n    let newStartVnode = newChildren[0]\r\n    let oldEndVnode = oldChildren[oldEndIndex]\r\n    let newEndVnode = newChildren[newEndIndex]\r\n    while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\r\n        // 双方有一方头指针大于尾部指针则停止循环(大于)\r\n    }\r\n    console.log(oldStartVnode, newStartVnode, oldEndVnode, newEndVnode);\r\n\r\n\r\n}","import Watcher from \"./observe/watcher\";\nimport { createElementVNode, createTextVNode } from \"./vdom\";\nimport { patch } from \"./vdom/patch\";\n\n\nexport function initLifeCycle(Vue) {\n    // 将vnode转化成真实dom\n    Vue.prototype._update = function (vnode) {\n        const vm = this\n        const el = vm.$el\n        //patch方法里面把虚拟节点转换为真实节点,并把模板中替换旧节点,采用diff算法\n        vm.$el = patch(el, vnode)\n    }\n\n    // _c('div',{},...children)\n    Vue.prototype._c = function () {\n        return createElementVNode(this, ...arguments)\n    }\n    // _v(text)\n    Vue.prototype._v = function () {\n        return createTextVNode(this, ...arguments)\n    }\n    Vue.prototype._s = function (value) {\n        if (typeof value !== 'object') return value\n        return JSON.stringify(value)\n    }\n\n\n    Vue.prototype._render = function () {\n        // 渲染时候会去实例取值,就将属性和视图绑定在一起\n        return this.$options.render.call(this); // 通过ast语法转义后生成的render方法\n    }\n}\n\n\n\n//挂载\nexport function mountComponent(vm, el) {\n    vm.$el = el // 这里的el 是通过querySelector处理过的,我们要挂载到的位置\n\n    // 1.调用render方法产生虚拟节点 虚拟DOM\n    const updateComponent = () => {\n        vm._update(vm._render());\n    }\n    new Watcher(vm, updateComponent, true) //true用于标识是一个渲染watcher\n\n    // 2.根据虚拟DOM产生真实DOM\n\n    // 3.插入到el元素中\n\n}\n// vue核心流程 1） 创造了响应式数据  2） 模板转换成ast语法树  \n// 3) 将ast语法树转换了render函数 4) 后续每次数据更新可以只执行render函数 (无需再次执行ast转化的过程)\n// render函数会去产生虚拟节点（使用响应式数据）\n// 根据生成的虚拟节点创造真实的DOM\n\nexport function callHook(vm, hook) { //调用钩子函数\n    const handlers = vm.$options[hook]\n    if (handlers) {\n        handlers.forEach(handlers => handlers.call(vm))\n    }\n}","import { initState } from './state'\r\nimport { compileToFunction } from './compiler';\r\nimport { callHook, mountComponent } from './lifecycle'\r\nimport { mergeOptions } from './utils';\r\n\r\nexport function initMixin(Vue) { //给Vue添加init方法\r\n    Vue.prototype._init = function (options) { //初始化操作\r\n        const vm = this;\r\n        vm.$options = mergeOptions(this.constructor.options,options); //将用户选项挂载到实例上\r\n\r\n        // 初始化状态\r\n        callHook(vm,'beforeCreate')\r\n        initState(vm)\r\n        callHook(vm,'created')\r\n        if (options.el) {\r\n            vm.$mount(options.el) //实现数据的挂载\r\n        }\r\n    }\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this\r\n        el = document.querySelector(el)\r\n        let ops = vm.$options\r\n        /**\r\n         * \r\n         * \r\n         * render==>template==>el.outerHTML\r\n         * \r\n         * \r\n         * */ \r\n        if (!ops.render) { //先查找一下有没有写render函数\r\n            let template; //没有render看一下是否写了template,没写template采用外部的template\r\n            if (!ops.template && el) { //没有写模板,但写了el\r\n                template = el.outerHTML\r\n            } else {\r\n                if (el) { // 只传template的话就要手动挂载(见chatGPT).这里代码没问题\r\n                    template = ops.template //采用模板内容\r\n                }\r\n            }\r\n            // 写了template就用写了的template\r\n            if (template) {\r\n                // 这里需要对模板进行编译,即生成AST树,根据AST树代码生成渲染函数.\r\n                const render = compileToFunction(template);\r\n                ops.render = render\r\n            }\r\n        }\r\n        mountComponent(vm, el); //组件的挂载\r\n\r\n    }\r\n}\r\n","import { initGlobalAPI } from \"./GlobalAPI\";\r\nimport { compileToFunction } from \"./compiler\";\r\nimport { initMixin } from \"./init\"\r\nimport { initLifeCycle } from \"./lifecycle\";\r\nimport { initStateMixin } from \"./state\";\r\nimport { createElm, patch } from \"./vdom/patch\";\r\n\r\n\r\nfunction Vue(options) { //options就是用户的选项,包括data,computed等等\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue) //给vue对象扩展了init方法\r\ninitLifeCycle(Vue); //添加vue的生命周期\r\ninitGlobalAPI(Vue) // 添加vue的全局方法\r\ninitStateMixin(Vue) //实现了nextTick $watch\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ----------------测试---------------\r\nlet render1 = compileToFunction(`<ul style=\"color:blue\" a=\"1\" key=\"hi\">\r\n<li key=\"a\">a</li>\r\n<li key=\"b\">b</li>\r\n<li key=\"c\">c</li>\r\n</ul>`)\r\nlet vm1 = new Vue({data:{name:'cc'}})\r\nlet preVnode = render1.call(vm1)\r\nlet el = createElm(preVnode)\r\ndocument.body.appendChild(el)\r\n\r\n\r\nlet render2 = compileToFunction(`<ul style=\"background-color:red\"  a=\"2\" b=\"1\" key=\"hi\">\r\n<li key=\"a\">a</li>\r\n<li key=\"b\">b</li>\r\n<li key=\"c\">c</li>\r\n<li key=\"d\">d</li>\r\n</ul>`)\r\nlet vm2 = new Vue({data:{name:'lzb'}})\r\nlet nextVnode = render2.call(vm2)\r\n\r\nsetTimeout(()=>{\r\n    patch(preVnode,nextVnode)\r\n    // let newEl = createElm(nextVnode)\r\n    // el.parentNode.replaceChild(newEl,el)\r\n},1000)\r\n\r\n\r\n\r\nexport default Vue"],"names":["strats","LIFECYCLE","forEach","hook","p","c","concat","mergeOptions","parent","child","options","key","mergeField","hasOwnProperty","initGlobalAPI","Vue","mixin","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","_loop","i","obj","split","item","_item$split","_item$split2","_slicedToArray","JSON","stringify","slice","defaultTagRE","gen","codegen","test","tokens","lastIndex","exec","index","trim","join","genChildren","map","ast","code","compileToFunction","template","render","Function","id","Dep","_classCallCheck","subs","_createClass","depend","target","addDep","addSub","watcher","notify","update","pushTarget","popTarget","oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","method","_oldArrayProto$method","_len","arguments","args","_key","result","call","apply","inserted","ob","__ob__","observeArray","dep","Observer","data","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","observe","dependArray","current","childOb","get","set","newValue","_typeof","Watcher","vm","exprOrFn","cb","renderWatcher","getter","deps","depsId","Set","user","lazy","dirty","undefined","has","add","evaluate","queueWatcher","run","oldValue","queue","pending","flushSchedulerQueue","flushQueue","q","nextTick","callbacks","waiting","flushCallbacks","cbs","Promise","resolve","then","initState","opts","$options","initData","computed","initComputed","watch","initWatch","handler","createWatcher","$watch","proxy","_data","watchers","_computedWachers","userDef","fn","defineComputed","setter","createComputedGetter","initStateMixin","$nextTick","createElementVNode","vnode","createTextVNode","isSameVnode","vnode1","vnode2","createElm","el","document","createElement","patchProps","appendChild","createTextNode","oldProps","props","oldStyles","style","newStyles","removeAttribute","styleName","setAttribute","patch","oldVnode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","patchVnode","replaceChild","textContent","oldChildren","newChildren","updateChildren","mountChildren","innerHTML","oldEndIndex","newEndIndex","oldStartVnode","newStartVnode","oldEndVnode","newEndVnode","console","log","initLifeCycle","_update","$el","_c","_v","_s","_render","mountComponent","updateComponent","callHook","handlers","initMixin","_init","constructor","$mount","querySelector","ops","outerHTML","render1","vm1","preVnode","body","render2","vm2","nextVnode","setTimeout"],"mappings":"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"}