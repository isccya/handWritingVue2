{"version":3,"file":"vue.js","sources":["../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/compiler/parse.js","../src/compiler/index.js","../src/init.js","../src/lifecycle.js","../src/index.js"],"sourcesContent":["// 我们希望重写数组上的方法\r\n\r\n\r\n\r\nlet oldArrayProto = Array.prototype //获取数组的原型\r\n\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nlet methods = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'reverse',\r\n    'sort',\r\n    'splice',\r\n]\r\n\r\nmethods.forEach((method) => {\r\n    newArrayProto[method] = function (...args) { //这里重写了数组的方法\r\n        // console.log(method);\r\n        const result = oldArrayProto[method].call(this, ...args) //内部调用原来的方法\r\n        let inserted ;\r\n        let ob = this.__ob__;\r\n        switch(method){\r\n            case 'push' :\r\n            case 'unshift' :\r\n                inserted = args\r\n                break;\r\n            case 'splice' :\r\n                inserted = args.slice(2)\r\n            default:\r\n                break;\r\n        }\r\n        if(inserted){\r\n            ob.observeArray(inserted);\r\n        }\r\n\r\n        return result\r\n    }\r\n})\r\n// console.log(newArrayProto);","import { newArrayProto } from \"./array\"\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n        // Object,defineProperty只能劫持已经存在的属性\r\n        Object.defineProperty(data,'__ob__',{//给数据添加了一个标识,如果数据上有_ob_说明这个数据被观测过了\r\n            value:this,\r\n            enumerable:false,//将下划线ob变成不可枚举(循环时候无法获取)\r\n        })\r\n        // data._ob_ = this; \r\n        if (Array.isArray(data)) { //如果代理的数据是数组,不能给数组每一个索引都作响应式,很少有arr[876]这样的需求,只对数组方法里面做响应式,还有数组里面的对象作响应式\r\n            data.__proto__ = newArrayProto //保留数组原有的特性,并且可以重写部分方法\r\n            this.observeArray(data) //如果数组中存放的是对象,可以监测到对象的变化\r\n        } else {\r\n            this.walk(data)\r\n        }   \r\n    }\r\n    walk(data) { // 循环对象,对属性依次劫持\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n    }\r\n    observeArray(data) {\r\n        data.forEach(item => observe(item)) //把数组里的对象都变成响应式\r\n    }\r\n}\r\n\r\n// !!!最终定义对象属性为响应式的方法!!!\r\nexport function defineReactive(target, key, value) { //闭包 属性劫持\r\n    observe(value) //递归,值是对象,也对对象内部的值做劫持\r\n    Object.defineProperty(target, key, {\r\n        get() {\r\n            return value\r\n        },\r\n        set(newValue) {\r\n            if (newValue === value) return\r\n            observe(newValue)\r\n            value = newValue\r\n        }\r\n    })\r\n}\r\n\r\nexport function observe(data) {\r\n    // 对这个对象劫持\r\n    if (typeof data !== 'object' || data === null) {\r\n        return; //只对对象劫持\r\n    }\r\n    if(data._ob_ instanceof Observer){//说明这个对象被代理过了\r\n        return data._ob_  \r\n    } \r\n    return new Observer(data);\r\n}","import { observe } from './observe/index.js'\r\nexport function initState(vm) {\r\n    const opts = vm.$options;\r\n    if (opts.data) {\r\n        initData(vm);\r\n    }\r\n}\r\n\r\n// 解决访问vm属性要vm_data.name这种写法,直接vm.name\r\nfunction proxy(vm,target, key) {\r\n    Object.defineProperty(vm,key,{ //vm.name\r\n        get(){\r\n            return vm[target][key] //vm._data.name\r\n        },\r\n        set(newValue){\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data; //data可能是函数,也可能是对象\r\n    typeof data === 'function' ? data.call(vm) : data //data是用户返回的对象\r\n\r\n    vm._data = data //将返回的对象放到了_data上\r\n    // 对数据进行劫持 vue2里采用了一个api defineProperty\r\n    observe(data)\r\n\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n}","/**\r\n * 获取模板字符串后,从头到尾先解析开始标签,获得其标签名,属性,和结束标签和标签文本内容.模板字符串不断裁剪到为空.\r\n * 根据开始标签,文本,结束标签创建AST节点,注意根节点的判断,以及父子节点关系,通过一个栈数据结构判断父子节点\r\n * 开始标签会进栈,结束标签出栈,文本会直接作为当前父节点的属性,栈结尾的元素即为当前的要进栈元素的***父节点***\r\n * 最终形成AST语法树.每一层是一个节点,有父节点,子节点,和自身属性.\r\n * \r\n * */ \r\n\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 他匹配到的分组是一个 标签名  <xxx 匹配到的是开始 标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);  // 匹配的是</xxxx>  最终匹配到的分组就是结束标签的名字\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;  // 匹配属性\r\n// 第一个分组就是属性的key value 就是 分组3/分组4/分组五\r\nconst startTagClose = /^\\s*(\\/?)>/;  // <div> <br/>\r\n\r\n// vue3 采用的不是使用正则\r\n// 对模板进行编译处理  \r\nexport function parseHTML(html) {\r\n\r\n    const ELEMENT_TYPE = 1;\r\n    const TEXT_TYPE = 3;\r\n    const stack = []; // 用于存放元素的\r\n    let currentParent; // 指向的是栈中的最后一个\r\n    let root;\r\n\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            children:[],\r\n            attrs,\r\n            parent: null\r\n        }\r\n    }\r\n\r\n    function start(tag, attrs) {\r\n        let node = createASTElement(tag, attrs) //创建一个ast节点\r\n        if (!root) { //没有根节点,当前元素就是根节点\r\n            root = node\r\n        }\r\n        if (currentParent) {\r\n            node.parent = currentParent //子知父\r\n            currentParent.children.push(node) //父知子\r\n        }\r\n        stack.push(node)\r\n        currentParent = node //父节点为栈中最后一个元素\r\n    }\r\n\r\n    function chars(text) { //文本放到当前指向的节点\r\n        text = text.replace(/\\s/g,''); \r\n        text && currentParent.children.push({\r\n            type: TEXT_TYPE,\r\n            text,\r\n            parent:currentParent\r\n        })\r\n\r\n    }\r\n\r\n    function end(tag) {\r\n        stack.pop() //弹出最后一个\r\n        currentParent = stack[stack.length - 1]\r\n\r\n    }\r\n\r\n    // 模板解析完多少,就前进多少\r\n    function advance(n) {\r\n        html = html.substring(n)\r\n    }\r\n\r\n    // 解析开始标签及其里面的属性\r\n    function parseStartTag() {\r\n        const start = html.match(startTagOpen)\r\n        // 1.匹配到开始标签\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1], //标签名\r\n                attrs: []\r\n            }\r\n            advance(start[0].length);\r\n            // 2.如果不是开始标签的结束,就一直匹配属性,把属性值放入match.attrs中\r\n            let attr, end;\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                advance(attr[0].length)\r\n                match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] } || true)\r\n            }\r\n            // 3.匹配到结束符号\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n            return match\r\n        }\r\n        return false //不是开始标签\r\n    }\r\n\r\n\r\n    while (html) {\r\n        // 如果textEnd 为0 说明是一个开始标签或者结束标签\r\n        // 如果textEnd > 0说明就是文本的结束位置\r\n        let textEnd = html.indexOf('<');  // 如果indexOf中的索引是0 则说明是个标签\r\n        if (textEnd === 0) {\r\n            const startTagMatch = parseStartTag() //开始标签的匹配\r\n            if (startTagMatch) {\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            let endTagMatch = html.match(endTag)\r\n            if (endTagMatch) {\r\n                end(endTagMatch[1])\r\n                advance(endTagMatch[0].length)\r\n                continue\r\n            }\r\n\r\n        }\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd) //文本内容\r\n            if (text) {\r\n                chars(text)\r\n                advance(text.length) //解析到的文本\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n}","import { parseHTML } from \"./parse\";\r\n\r\nfunction genProps(attrs) {\r\n    let str = ''// {name,value}\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i];\r\n        if (attr.name === 'style') {\r\n            // color:red;background:red => {color:'red'}\r\n            let obj = {};\r\n            attr.value.split(';').forEach(item => { // qs 库\r\n                let [key, value] = item.split(':');\r\n                obj[key] = value;\r\n            });\r\n            attr.value = obj\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},` // a:b,c:d,\r\n    }\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; // {{ asdsadsa }}  匹配到的内容就是我们表达式的变量\r\nfunction gen(node) {\r\n    if (node.type === 1) {\r\n        return codegen(node);\r\n    } else {\r\n        // 文本\r\n        let text = node.text\r\n        if (!defaultTagRE.test(text)) {\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else {\r\n            //_v( _s(name)+'hello' + _s(name))\r\n            let tokens = [];\r\n            let match;\r\n            defaultTagRE.lastIndex = 0;\r\n            let lastIndex = 0;\r\n            // split\r\n            while (match = defaultTagRE.exec(text)) {\r\n                let index = match.index; // 匹配的位置  {{name}} hello  {{name}} hello \r\n                if (index > lastIndex) {\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                tokens.push(`_s(${match[1].trim()})`)\r\n                lastIndex = index + match[0].length\r\n            }\r\n            if (lastIndex < text.length) {\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            return `_v(${tokens.join('+')})`\r\n        }\r\n    }\r\n}\r\nfunction genChildren(children) {\r\n    return children.map(child => gen(child)).join(',')\r\n}\r\nfunction codegen(ast) {\r\n    let children = genChildren(ast.children);\r\n    let code = (`_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'\r\n        }${ast.children.length ? `,${children}` : ''\r\n        })`)\r\n\r\n    return code;\r\n}\r\n\r\nexport function compileToFunction(template) {\r\n\r\n    // 1.将template转换为AST语法树\r\n    let ast = parseHTML(template)\r\n    \r\n    // 2.生成render方法(render方法执行后返回的是虚拟DOM)\r\n    let code = codegen(ast);\r\n\r\n    // 模板引擎的实现原理 就是 with  + new Function \r\n\r\n\r\n    code = `with(this){return ${code}}`\r\n    const render = new Function(code)\r\n    return render\r\n}","import { initState } from './state' \r\nimport { compileToFunction } from './compiler';\r\nexport function initMixin(Vue){ //给Vue添加init方法\r\n    Vue.prototype._init = function(options){ //初始化操作\r\n        const vm = this;\r\n        vm.$options = options; //将用户选项挂载到实例上\r\n\r\n        // 初始化状态\r\n        initState(vm)\r\n        if(options.el){\r\n            vm.$mount(options.el) //实现数据的挂载\r\n        }\r\n    }\r\n    Vue.prototype.$mount = function(el){\r\n        const vm = this\r\n        el = document.querySelector(el)\r\n        let ops = vm.$options\r\n        // render==>template==>el.outerHTML\r\n        if(!ops.render){ //先查找一下有没有写render函数\r\n            let template; //没有render看一下是否写了template,没写template采用外部的template\r\n            if(!ops.template && el){ //没有写模板,但写了el\r\n                template = el.outerHTML\r\n            }else{\r\n                if(el){\r\n                    template = ops.template //如果有el,则采用模板内容\r\n                }\r\n            }\r\n            // 写了template就用写了的template\r\n            if(template){\r\n                // 这里需要对模板进行编译\r\n                const render = compileToFunction(template);\r\n                ops.render = render\r\n            }        \r\n        }\r\n        mountComponent(vm,el); //组件的挂载\r\n\r\n    }\r\n}\r\n","export function initLifeCycle(Vue){\n    Vue.prototype._update = function(){ // 将vnode转化成真实dom\n        const vm = this;\n        const el = vm.$el;\n    }\n\n    Vue.prototype._render = function(){\n        const vm = this;\n        return this.$options.render.call(this); // 通过ast语法转义后生成的render方法\n    }\n}\n\nexport function mountComponent(vm,el){\n    // 1.调用render方法产生虚拟节点 虚拟DOM\n\n    vm._update(vm._render()); // vm.$options.render() 虚拟节点\n\n    // 2.根据虚拟DOM产生真实DOM \n\n    // 3.插入到el元素中\n\n}\n// vue核心流程 1） 创造了响应式数据  2） 模板转换成ast语法树  \n// 3) 将ast语法树转换了render函数 4) 后续每次数据更新可以只执行render函数 (无需再次执行ast转化的过程)\n// render函数会去产生虚拟节点（使用响应式数据）\n// 根据生成的虚拟节点创造真实的DOM\n\n","import { initMixin } from \"./init\"\r\nimport { initLifeCycle } from \"./lifecycle\";\r\n\r\n\r\nfunction Vue(options){ //options就是用户的选项,包括data,computed等等\r\n    this._init(options)\r\n}\r\n        \r\ninitMixin(Vue) //给vue对象扩展了init方法\r\ninitLifeCycle(Vue);\r\n\r\n\r\nexport default Vue"],"names":["oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","forEach","method","_oldArrayProto$method","_len","arguments","length","args","_key","result","call","apply","concat","inserted","ob","__ob__","slice","observeArray","Observer","data","_classCallCheck","defineProperty","value","enumerable","isArray","__proto__","walk","_createClass","key","keys","defineReactive","item","observe","target","get","set","newValue","_typeof","_ob_","initState","vm","opts","$options","initData","proxy","_data","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","advance","n","substring","parseStartTag","match","tagName","attr","name","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","_loop","i","obj","split","_item$split","_item$split2","_slicedToArray","JSON","stringify","defaultTagRE","gen","codegen","test","tokens","lastIndex","exec","index","trim","join","genChildren","map","child","ast","code","compileToFunction","template","render","Function","initMixin","Vue","_init","options","el","$mount","document","querySelector","ops","outerHTML","mountComponent","initLifeCycle","_update","$el","_render"],"mappings":"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"}